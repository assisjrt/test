pipeline {
    agent { label "jenkins-agent" }

    stages {
        stage('Information') {
            steps {
                echo env.BRANCH_NAME
                echo env.TAG_NAME
            }
        }

        stage('SAST') {
            when {
                anyOf {
                    expression { env.BRANCH_NAME ==~ /^(main|staging|develop)$/ }
                    expression { env.TAG_NAME ==~ /^(v\d+\.\d+\.\d+$|v\d+\.\d+\.\d+-staging$)/ }
                }
            }

            parallel {
                stage('gosec') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            container('gosec') {
                                sh """
                                    mkdir -p ./build/test-reports
                                    gosec -r -fmt junit-xml -out ./build/test-reports/gosec-report.xml .
                                """
                            }
                        }
                    }

                    post {
                        always {
                            junit testResults: '**/build/test-reports/*.xml', allowEmptyResults: false
                        }
                    }
                }

                stage('bandit') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            container('bandit') {
                                sh """
                                    mkdir -p ./build/test-reports
                                    bandit --format=xml --recursive --output=./build/test-reports/bandit-report.xml .
                                """
                            }
                        }
                    }

                    post {
                        always {
                            junit testResults: '**/build/test-reports/*.xml', allowEmptyResults: false
                        }
                    }
                }

                stage('checkov') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            container('checkov') {
                                sh """
                                    mkdir -p ./build/test-reports
                                    checkov --directory=. --output=junitxml > ./build/test-reports/checkov-report.xml
                                """
                            }
                        }
                    }

                    post {
                        always {
                            junit testResults: '**/build/test-reports/*.xml', allowEmptyResults: false
                        }
                    }
                }
            }
        }

        stage('Build') {
            when {
                anyOf {
                    expression { env.BRANCH_NAME ==~ /^(main|staging|develop)$/ }
                    expression { env.TAG_NAME ==~ /^(v\d+\.\d+\.\d+$|v\d+\.\d+\.\d+-staging$)/ }
                }
            }

            steps {
                echo "Building.."
            }
        }

        stage('Test') {
            when {
                anyOf {
                    expression { env.BRANCH_NAME ==~ /^(main|staging|develop)$/ }
                    expression { env.TAG_NAME ==~ /^(v\d+\.\d+\.\d+$|v\d+\.\d+\.\d+-staging$)/ }
                }
            }

            steps {
                echo "Testing..."
            }
        }

        stage('Deploy') {
            when {
                anyOf {
                    expression { env.BRANCH_NAME ==~ /^(main|staging|develop)$/ }
                    expression { env.TAG_NAME ==~ /^(v\d+\.\d+\.\d+$|v\d+\.\d+\.\d+-staging$)/ }
                }
            }

            steps {
                echo "Deploying...."
            }
        }
    }
}
